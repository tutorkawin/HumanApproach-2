n=3

player1: -->1
player2: -->2

board[n][n]={ {0,0,0},{0,0,0},{0,0,0} }
for(int i=0;i<n;i++)
{
	for(int j=0;j<n;j++)
	{
		board[i][j]=0;
	}
}

0 0 0 
0 0 0 
0 0 0

k=1
pos=0;
while(k<=n*n)
{
	if(k%2!=0)
	{
	
		// player 1
		printf("player 1");
		printf("Enter a value");
		scanf("%d",&pos);
		if(pos<=n*n && pos>0) 8-1
		{
			row=(pos-1)/n   7/3=>2
			col=(pos-1)%n   7%3=>1
			if(board[row][col]==0)
			{
				board[row][col]=1;
				display(n,board);
			}
			else
			{
				print("already occupied");
				k--; 0
			}
		}
		else
		{
			print("worngly entered, give value 1 to 9 ");
			k--;
			#
		}
		if(n*2-1<=k)
		{
			result1 = rightDaigonal(n,board);
			result2 = leftDaigonal(n,board);
			result3 = rowCheck();
			result4 = columnCheck();
		}

		if(result1>0 || result2>0|| result3>0 || result4>0)
		{
			print("player 1 won");
			break;
		}
		
	}
	else
	{
		// player 2
		printf("player 2");
		printf("Enter a value");
		scanf("%d",&pos);
		if(pos<=n*n && pos>0) 8-1
		{
			row=(pos-1)/n   7/3=>2
			col=(pos-1)%n   7%3=>1
			if(board[row][col]==0)
			{
				board[row][col]=2;
				display(n,board);
			}
			else
			{
				print("already occupied");
				k--; 0
			}
		}
		else
		{
			print("worngly entered, give value 1 to 9 ");
			k--;
			#
		}
		if(n*2-1<=k)
		{
			result1 = rightDaigonal(n,board);
			result2 = leftDaigonal(n,board);
			result3 = rowCheck();
			result4 = columnCheck();
		}
		if(result1>0 || result2>0|| result3>0 || result4>0)
		{
			print("player 2 won");
			break;
		}

	}
	k++;
	if(k==n*n)
	{
		print("Match draw!!!!!");
	}
}



----------------------------
funtionalites:
----------------------------

fun rightDaigonal(int n, int[][] board)
{
	for(int i=0,j=0;i<n;i++,j++)
	{
			if(board[i][j]==board[0][0])
			{
				flag++;
			}
			else
			{
				return 0;
			}
		if(flag==n)
		{
			return 1
		}

	}
}


1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1

2 0 0 
0 2 0 
0 0 2


left daigonal:

fun leftDaigonal(int n, int[][] board)
{
	for(int i=0,j=n-1;i<n;i++,j--)
	{
		if(board[i][j]==board[0][n-1])
		{
			flag++;
		}
		else
		{
			return 0;
		}
		if(flag==n)
		{
			return 1;
		}
	}
}

0 0 1 
0 1 0 
1 0 0

0 0 2
0 2 0 
2 0 0

row check:

fun rowCheck(int n, int[][] board)
{
	for(int i=0;i<n;i++)
	{
		flag=1
		for(j=1;j<n;j++)
		{
			if(board[i][0] == board[i][j])
			{
				flag++;2
			}
			if(flag==n-1)
			{
				return 1;
			}
		}
	}
	return 0;
}
1 1 1 
0 0 0 
0 0 0

col check:

fun colCheck(int n, int[][] board)
{
	for(int i=0;i<n;i++)
	{
		flag=1
		for(j=1;j<n;j++)
		{
			if(board[0][i] == board[j][i]) 0,0 1,0
			{
				flag++;
			}
			if(flag==n-1)
			{
				return 1;
			}
		}
	}
	return 0;
}
1 1 0 0
0 1 0 0
1 0 0 0
0 0 0 0


0 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0

0 0 1 0
0 0 1 0
0 0 1 0
0 0 1 0

0 0 0 1
0 0 0 1
0 0 0 1
0 0 0 1


display:

fun display(int n, int[][] board)
{
	for(int i=0,j=n-1;i<n;i++,j--)
	{
		for(int j=0;j<n;j++)
		{
			print(board[i][j])+" ")
		}
	}
}
--------------------------------------------------------------
logic for finding the position:


pos=1
row=(pos-1)/n   0/3=>0
col=(pos-1)%n   0%3=>0

5
4/3=>1 row
4%3=>1 col

2
1/3 =>0
1%3 =>1

10*10
100
99/10 9 row
99%10 9 col

